$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 # clk $end
  $var wire 1 $ rst $end
  $var wire 1 % id_ex_flush $end
  $var wire 1 & id_ex_write $end
  $var wire 32 ' instr_in [31:0] $end
  $var wire 32 ( pc_in [31:0] $end
  $var wire 1 ) reg_write_wb $end
  $var wire 5 * rd_wb [4:0] $end
  $var wire 32 + rd_data_wb [31:0] $end
  $var wire 32 , ex_alu_result [31:0] $end
  $var wire 32 - mem_alu_result [31:0] $end
  $var wire 5 . ex_rd [4:0] $end
  $var wire 5 / mem_rd [4:0] $end
  $var wire 1 0 ex_reg_write $end
  $var wire 1 1 mem_reg_write $end
  $var wire 2 2 forward_rs1 [1:0] $end
  $var wire 2 3 forward_rs2 [1:0] $end
  $var wire 5 4 rs1_hzd [4:0] $end
  $var wire 5 5 rs2_hzd [4:0] $end
  $var wire 5 6 rd_hzd [4:0] $end
  $var wire 5 7 rs1_out [4:0] $end
  $var wire 5 8 rs2_out [4:0] $end
  $var wire 5 9 rd_out [4:0] $end
  $var wire 32 : pc_out [31:0] $end
  $var wire 32 ; rs1_data_out [31:0] $end
  $var wire 32 < rs2_data_out [31:0] $end
  $var wire 32 = imm_out [31:0] $end
  $var wire 3 > funct3_out [2:0] $end
  $var wire 4 ? alu_ctrl_out [3:0] $end
  $var wire 3 @ branch_ctrl_out [2:0] $end
  $var wire 2 A wb_sel_out [1:0] $end
  $var wire 1 B reg_write_out $end
  $var wire 1 C mem_read_out $end
  $var wire 1 D mem_write_out $end
  $var wire 1 E mem_to_reg_out $end
  $var wire 1 F jal_out $end
  $var wire 1 G jalr_out $end
  $var wire 1 H branch_out $end
  $var wire 1 I alu_src_out $end
  $scope module id_stage_pip $end
   $var wire 1 J clk $end
   $var wire 1 K rst $end
   $var wire 1 L id_ex_flush $end
   $var wire 1 M id_ex_write $end
   $var wire 32 N instr_in [31:0] $end
   $var wire 32 O pc_in [31:0] $end
   $var wire 1 P reg_write_wb $end
   $var wire 5 Q rd_wb [4:0] $end
   $var wire 32 R rd_data_wb [31:0] $end
   $var wire 32 S ex_alu_result [31:0] $end
   $var wire 32 T mem_alu_result [31:0] $end
   $var wire 5 U ex_rd [4:0] $end
   $var wire 5 V mem_rd [4:0] $end
   $var wire 1 W ex_reg_write $end
   $var wire 1 X mem_reg_write $end
   $var wire 2 Y forward_rs1 [1:0] $end
   $var wire 2 Z forward_rs2 [1:0] $end
   $var wire 5 [ rs1_hzd [4:0] $end
   $var wire 5 \ rs2_hzd [4:0] $end
   $var wire 5 ] rd_hzd [4:0] $end
   $var wire 5 ^ rs1_out [4:0] $end
   $var wire 5 _ rs2_out [4:0] $end
   $var wire 5 ` rd_out [4:0] $end
   $var wire 32 a pc_out [31:0] $end
   $var wire 32 b rs1_data_out [31:0] $end
   $var wire 32 c rs2_data_out [31:0] $end
   $var wire 32 d imm_out [31:0] $end
   $var wire 3 e funct3_out [2:0] $end
   $var wire 4 f alu_ctrl_out [3:0] $end
   $var wire 3 g branch_ctrl_out [2:0] $end
   $var wire 2 h wb_sel_out [1:0] $end
   $var wire 1 i reg_write_out $end
   $var wire 1 j mem_read_out $end
   $var wire 1 k mem_write_out $end
   $var wire 1 l mem_to_reg_out $end
   $var wire 1 m jal_out $end
   $var wire 1 n jalr_out $end
   $var wire 1 o branch_out $end
   $var wire 1 p alu_src_out $end
   $var wire 7 q opcode [6:0] $end
   $var wire 3 r funct3 [2:0] $end
   $var wire 7 s funct7 [6:0] $end
   $var wire 5 t rs1 [4:0] $end
   $var wire 5 u rs2 [4:0] $end
   $var wire 5 v rd [4:0] $end
   $var wire 32 w imm [31:0] $end
   $var wire 32 x rs1_data [31:0] $end
   $var wire 32 y rs2_data [31:0] $end
   $var wire 4 z alu_ctrl [3:0] $end
   $var wire 3 { branch_ctrl [2:0] $end
   $var wire 2 | wb_sel [1:0] $end
   $var wire 1 } reg_write $end
   $var wire 1 ~ mem_read $end
   $var wire 1 !! mem_write $end
   $var wire 1 "! mem_to_reg $end
   $var wire 1 #! jal $end
   $var wire 1 $! jalr $end
   $var wire 1 %! branch $end
   $var wire 1 &! alu_src $end
   $var wire 32 '! rs1_data_forwarded [31:0] $end
   $var wire 32 (! rs2_data_forwarded [31:0] $end
   $scope module control $end
    $var wire 7 )! opcode [6:0] $end
    $var wire 3 *! funct3 [2:0] $end
    $var wire 7 +! funct7 [6:0] $end
    $var wire 4 ,! alu_ctrl [3:0] $end
    $var wire 3 -! branch_ctrl [2:0] $end
    $var wire 2 .! wb_sel [1:0] $end
    $var wire 1 /! reg_write $end
    $var wire 1 0! mem_read $end
    $var wire 1 1! mem_write $end
    $var wire 1 2! mem_to_reg $end
    $var wire 1 3! jal $end
    $var wire 1 4! jalr $end
    $var wire 1 5! branch $end
    $var wire 1 6! alu_src $end
    $var wire 4 5" ADD [3:0] $end
    $var wire 4 6" SUB [3:0] $end
    $var wire 4 7" AND [3:0] $end
    $var wire 4 8" OR [3:0] $end
    $var wire 4 9" XOR [3:0] $end
    $var wire 4 :" SLL [3:0] $end
    $var wire 4 ;" SRL [3:0] $end
    $var wire 4 <" SRA [3:0] $end
    $var wire 4 =" SLT [3:0] $end
    $var wire 4 >" SLTU [3:0] $end
    $var wire 4 ?" PASS [3:0] $end
    $var wire 4 @" ADD_PC [3:0] $end
    $var wire 3 A" BEQ [2:0] $end
    $var wire 3 B" BNE [2:0] $end
    $var wire 3 C" BLT [2:0] $end
    $var wire 3 D" BGE [2:0] $end
    $var wire 3 E" BLTU [2:0] $end
    $var wire 3 F" BGEU [2:0] $end
    $var wire 7 G" R_TYPE [6:0] $end
    $var wire 7 H" I_TYPE_LOAD [6:0] $end
    $var wire 7 I" I_TYPE_ALU [6:0] $end
    $var wire 7 J" I_TYPE_JALR [6:0] $end
    $var wire 7 K" S_TYPE [6:0] $end
    $var wire 7 L" B_TYPE [6:0] $end
    $var wire 7 M" J_TYPE [6:0] $end
    $var wire 7 N" U_TYPE_LUI [6:0] $end
    $var wire 7 O" U_TYPE_AUIPC [6:0] $end
   $upscope $end
   $scope module decoder $end
    $var wire 32 7! instr [31:0] $end
    $var wire 7 8! opcode [6:0] $end
    $var wire 5 9! rd [4:0] $end
    $var wire 5 :! rs1 [4:0] $end
    $var wire 5 ;! rs2 [4:0] $end
    $var wire 3 <! funct3 [2:0] $end
    $var wire 7 =! funct7 [6:0] $end
    $var wire 32 >! imm [31:0] $end
    $var wire 7 G" R_TYPE [6:0] $end
    $var wire 7 H" I_TYPE_LOAD [6:0] $end
    $var wire 7 I" I_TYPE_ALU [6:0] $end
    $var wire 7 J" I_TYPE_JALR [6:0] $end
    $var wire 7 K" S_TYPE [6:0] $end
    $var wire 7 L" B_TYPE [6:0] $end
    $var wire 7 M" J_TYPE [6:0] $end
    $var wire 7 N" U_TYPE_LUI [6:0] $end
    $var wire 7 O" U_TYPE_AUIPC [6:0] $end
   $upscope $end
   $scope module idex_register $end
    $var wire 1 ?! clk $end
    $var wire 1 @! rst $end
    $var wire 1 A! id_ex_write $end
    $var wire 1 B! id_ex_flush $end
    $var wire 32 C! pc_in [31:0] $end
    $var wire 32 D! rs1_data_in [31:0] $end
    $var wire 32 E! rs2_data_in [31:0] $end
    $var wire 32 F! imm_in [31:0] $end
    $var wire 3 G! funct3_in [2:0] $end
    $var wire 5 H! rs1_in [4:0] $end
    $var wire 5 I! rs2_in [4:0] $end
    $var wire 5 J! rd_in [4:0] $end
    $var wire 4 K! alu_ctrl_in [3:0] $end
    $var wire 3 L! branch_ctrl_in [2:0] $end
    $var wire 2 M! wb_sel_in [1:0] $end
    $var wire 1 N! reg_write_in $end
    $var wire 1 O! mem_read_in $end
    $var wire 1 P! mem_write_in $end
    $var wire 1 Q! mem_to_reg_in $end
    $var wire 1 R! alu_src_in $end
    $var wire 1 S! branch_in $end
    $var wire 1 T! jal_in $end
    $var wire 1 U! jalr_in $end
    $var wire 32 V! pc_out [31:0] $end
    $var wire 32 W! rs1_data_out [31:0] $end
    $var wire 32 X! rs2_data_out [31:0] $end
    $var wire 32 Y! imm_out [31:0] $end
    $var wire 3 Z! funct3_out [2:0] $end
    $var wire 5 [! rs1_out [4:0] $end
    $var wire 5 \! rs2_out [4:0] $end
    $var wire 5 ]! rd_out [4:0] $end
    $var wire 4 ^! alu_ctrl_out [3:0] $end
    $var wire 3 _! branch_ctrl_out [2:0] $end
    $var wire 2 `! wb_sel_out [1:0] $end
    $var wire 1 a! reg_write_out $end
    $var wire 1 b! mem_read_out $end
    $var wire 1 c! mem_write_out $end
    $var wire 1 d! mem_to_reg_out $end
    $var wire 1 e! alu_src_out $end
    $var wire 1 f! branch_out $end
    $var wire 1 g! jal_out $end
    $var wire 1 h! jalr_out $end
   $upscope $end
   $scope module reg_file $end
    $var wire 1 i! clk $end
    $var wire 1 j! rst $end
    $var wire 1 k! reg_write $end
    $var wire 32 l! rd_data [31:0] $end
    $var wire 5 m! rs1 [4:0] $end
    $var wire 5 n! rs2 [4:0] $end
    $var wire 5 o! rd [4:0] $end
    $var wire 32 p! out_data_rs1 [31:0] $end
    $var wire 32 q! out_data_rs2 [31:0] $end
    $var wire 32 r! register_[0] [31:0] $end
    $var wire 32 s! register_[1] [31:0] $end
    $var wire 32 t! register_[2] [31:0] $end
    $var wire 32 u! register_[3] [31:0] $end
    $var wire 32 v! register_[4] [31:0] $end
    $var wire 32 w! register_[5] [31:0] $end
    $var wire 32 x! register_[6] [31:0] $end
    $var wire 32 y! register_[7] [31:0] $end
    $var wire 32 z! register_[8] [31:0] $end
    $var wire 32 {! register_[9] [31:0] $end
    $var wire 32 |! register_[10] [31:0] $end
    $var wire 32 }! register_[11] [31:0] $end
    $var wire 32 ~! register_[12] [31:0] $end
    $var wire 32 !" register_[13] [31:0] $end
    $var wire 32 "" register_[14] [31:0] $end
    $var wire 32 #" register_[15] [31:0] $end
    $var wire 32 $" register_[16] [31:0] $end
    $var wire 32 %" register_[17] [31:0] $end
    $var wire 32 &" register_[18] [31:0] $end
    $var wire 32 '" register_[19] [31:0] $end
    $var wire 32 (" register_[20] [31:0] $end
    $var wire 32 )" register_[21] [31:0] $end
    $var wire 32 *" register_[22] [31:0] $end
    $var wire 32 +" register_[23] [31:0] $end
    $var wire 32 ," register_[24] [31:0] $end
    $var wire 32 -" register_[25] [31:0] $end
    $var wire 32 ." register_[26] [31:0] $end
    $var wire 32 /" register_[27] [31:0] $end
    $var wire 32 0" register_[28] [31:0] $end
    $var wire 32 1" register_[29] [31:0] $end
    $var wire 32 2" register_[30] [31:0] $end
    $var wire 32 3" register_[31] [31:0] $end
    $var wire 32 4" i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
1$
0%
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
0)
b00000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000 .
b00000 /
00
01
b00 2
b00 3
b00000 4
b00000 5
b00000 6
b00000 7
b00000 8
b00000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b000 >
b0000 ?
b000 @
b00 A
0B
0C
0D
0E
0F
0G
0H
0I
0J
1K
0L
0M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
0P
b00000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000 U
b00000 V
0W
0X
b00 Y
b00 Z
b00000 [
b00000 \
b00000 ]
b00000 ^
b00000 _
b00000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b000 e
b0000 f
b000 g
b00 h
0i
0j
0k
0l
0m
0n
0o
0p
b0000000 q
b000 r
b0000000 s
b00000 t
b00000 u
b00000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b0000 z
b000 {
b00 |
0}
0~
0!!
0"!
0#!
0$!
0%!
0&!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b0000000 )!
b000 *!
b0000000 +!
b0000 ,!
b000 -!
b00 .!
0/!
00!
01!
02!
03!
04!
05!
06!
b00000000000000000000000000000000 7!
b0000000 8!
b00000 9!
b00000 :!
b00000 ;!
b000 <!
b0000000 =!
b00000000000000000000000000000000 >!
0?!
1@!
0A!
0B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b000 G!
b00000 H!
b00000 I!
b00000 J!
b0000 K!
b000 L!
b00 M!
0N!
0O!
0P!
0Q!
0R!
0S!
0T!
0U!
b00000000000000000000000000000000 V!
b00000000000000000000000000000000 W!
b00000000000000000000000000000000 X!
b00000000000000000000000000000000 Y!
b000 Z!
b00000 [!
b00000 \!
b00000 ]!
b0000 ^!
b000 _!
b00 `!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
0h!
0i!
1j!
0k!
b00000000000000000000000000000000 l!
b00000 m!
b00000 n!
b00000 o!
b00000000000000000000000000000000 p!
b00000000000000000000000000000000 q!
b00000000000000000000000000000000 r!
b00000000000000000000000000000000 s!
b00000000000000000000000000000000 t!
b00000000000000000000000000000000 u!
b00000000000000000000000000000000 v!
b00000000000000000000000000000000 w!
b00000000000000000000000000000000 x!
b00000000000000000000000000000000 y!
b00000000000000000000000000000000 z!
b00000000000000000000000000000000 {!
b00000000000000000000000000000000 |!
b00000000000000000000000000000000 }!
b00000000000000000000000000000000 ~!
b00000000000000000000000000000000 !"
b00000000000000000000000000000000 ""
b00000000000000000000000000000000 #"
b00000000000000000000000000000000 $"
b00000000000000000000000000000000 %"
b00000000000000000000000000000000 &"
b00000000000000000000000000000000 '"
b00000000000000000000000000000000 ("
b00000000000000000000000000000000 )"
b00000000000000000000000000000000 *"
b00000000000000000000000000000000 +"
b00000000000000000000000000000000 ,"
b00000000000000000000000000000000 -"
b00000000000000000000000000000000 ."
b00000000000000000000000000000000 /"
b00000000000000000000000000000000 0"
b00000000000000000000000000000000 1"
b00000000000000000000000000000000 2"
b00000000000000000000000000000000 3"
b00000000000000000000000000000000 4"
b0000 5"
b0001 6"
b0010 7"
b0011 8"
b0100 9"
b0101 :"
b0110 ;"
b0111 <"
b1000 ="
b1001 >"
b1010 ?"
b1011 @"
b000 A"
b001 B"
b010 C"
b011 D"
b100 E"
b101 F"
b0110011 G"
b0000011 H"
b0010011 I"
b1100111 J"
b0100011 K"
b1100011 L"
b1101111 M"
b0110111 N"
b0010111 O"
#5
1#
1J
1?!
1i!
b00000000000000000000000000100000 4"
#10
0#
0$
0J
0K
0?!
0@!
0i!
0j!
#15
1#
1J
1?!
1i!
#20
0#
1&
b00000000101101010000010100110011 '
1)
b00101 *
b00000000000000000000000000101010 +
b00000000000000000000000001100100 ,
b00000000000000000000000011001000 -
b01010 .
b01011 /
10
11
b01 2
b10 3
b01010 4
b01011 5
b01010 6
0J
1M
b00000000101101010000010100110011 N
1P
b00101 Q
b00000000000000000000000000101010 R
b00000000000000000000000001100100 S
b00000000000000000000000011001000 T
b01010 U
b01011 V
1W
1X
b01 Y
b10 Z
b01010 [
b01011 \
b01010 ]
b0110011 q
b01010 t
b01011 u
b01010 v
1}
b00000000000000000000000000101010 '!
b00000000000000000000000011001000 (!
b0110011 )!
1/!
b00000000101101010000010100110011 7!
b0110011 8!
b01010 9!
b01010 :!
b01011 ;!
0?!
1A!
b00000000000000000000000000101010 D!
b00000000000000000000000011001000 E!
b01010 H!
b01011 I!
b01010 J!
1N!
0i!
1k!
b00000000000000000000000000101010 l!
b01010 m!
b01011 n!
b00101 o!
#25
1#
b01010 7
b01011 8
b01010 9
b00000000000000000000000000101010 ;
b00000000000000000000000011001000 <
1B
1J
b01010 ^
b01011 _
b01010 `
b00000000000000000000000000101010 b
b00000000000000000000000011001000 c
1i
1?!
b00000000000000000000000000101010 W!
b00000000000000000000000011001000 X!
b01010 [!
b01011 \!
b01010 ]!
1a!
1i!
b00000000000000000000000000101010 w!
#30
0#
1%
0&
b00000000000000000000000000010011 '
b00000000000000000000000000000100 (
b00000 4
b00000 5
b00000 6
0J
1L
0M
b00000000000000000000000000010011 N
b00000000000000000000000000000100 O
b00000 [
b00000 \
b00000 ]
b0010011 q
b00000 t
b00000 u
b00000 v
1&!
b0010011 )!
16!
b00000000000000000000000000010011 7!
b0010011 8!
b00000 9!
b00000 :!
b00000 ;!
0?!
0A!
1B!
b00000000000000000000000000000100 C!
b00000 H!
b00000 I!
b00000 J!
1R!
0i!
b00000 m!
b00000 n!
#35
1#
b00000 7
b00000 8
b00000 9
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
0B
1J
b00000 ^
b00000 _
b00000 `
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
0i
1?!
b00000000000000000000000000000000 W!
b00000000000000000000000000000000 X!
b00000 [!
b00000 \!
b00000 ]!
0a!
1i!
