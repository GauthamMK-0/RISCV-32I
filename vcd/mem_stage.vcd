$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 # clk $end
  $var wire 1 $ rst $end
  $var wire 32 % pc_in [31:0] $end
  $var wire 32 & alu_result_in [31:0] $end
  $var wire 32 ' rs2_data_in [31:0] $end
  $var wire 3 ( funct3_in [2:0] $end
  $var wire 5 ) rd_in [4:0] $end
  $var wire 2 * wb_sel_in [1:0] $end
  $var wire 1 + mem_read_in $end
  $var wire 1 , mem_write_in $end
  $var wire 1 - reg_write_in $end
  $var wire 1 . mem_to_reg_in $end
  $var wire 32 / pc_out [31:0] $end
  $var wire 32 0 alu_result_out [31:0] $end
  $var wire 32 1 mem_data_out [31:0] $end
  $var wire 5 2 rd_out [4:0] $end
  $var wire 2 3 wb_sel_out [1:0] $end
  $var wire 1 4 reg_write_out $end
  $var wire 1 5 mem_to_reg_out $end
  $scope module mem_stage_pip $end
   $var wire 1 6 clk $end
   $var wire 1 7 rst $end
   $var wire 32 8 pc_in [31:0] $end
   $var wire 32 9 alu_result_in [31:0] $end
   $var wire 32 : rs2_data_in [31:0] $end
   $var wire 3 ; funct3_in [2:0] $end
   $var wire 5 < rd_in [4:0] $end
   $var wire 2 = wb_sel_in [1:0] $end
   $var wire 1 > mem_read_in $end
   $var wire 1 ? mem_write_in $end
   $var wire 1 @ reg_write_in $end
   $var wire 1 A mem_to_reg_in $end
   $var wire 32 B pc_out [31:0] $end
   $var wire 32 C alu_result_out [31:0] $end
   $var wire 32 D mem_data_out [31:0] $end
   $var wire 5 E rd_out [4:0] $end
   $var wire 2 F wb_sel_out [1:0] $end
   $var wire 1 G reg_write_out $end
   $var wire 1 H mem_to_reg_out $end
   $var wire 2 I addr_lsb [1:0] $end
   $var wire 4 J byte_enable [3:0] $end
   $var wire 32 K mem_data [31:0] $end
   $var wire 32 L read_data [31:0] $end
   $scope module byte_mask $end
    $var wire 3 M funct3 [2:0] $end
    $var wire 2 N addr_lsb [1:0] $end
    $var wire 4 O byte_enable [3:0] $end
   $upscope $end
   $scope module mem_access $end
    $var wire 32 P mem_data [31:0] $end
    $var wire 2 Q addr_lsb [1:0] $end
    $var wire 3 R funct3 [2:0] $end
    $var wire 32 S mem_out [31:0] $end
   $upscope $end
   $scope module memory $end
    $var wire 1 T clk $end
    $var wire 32 U addr [31:0] $end
    $var wire 32 V write_data [31:0] $end
    $var wire 4 W byte_enable [3:0] $end
    $var wire 1 X mem_write $end
    $var wire 1 Y mem_read $end
    $var wire 32 Z read_data [31:0] $end
   $upscope $end
   $scope module memwb_register $end
    $var wire 1 [ clk $end
    $var wire 1 \ rst $end
    $var wire 1 ] reg_write_in $end
    $var wire 1 ^ mem_to_reg_in $end
    $var wire 2 _ wb_sel_in [1:0] $end
    $var wire 32 ` pc_in [31:0] $end
    $var wire 32 a alu_result_in [31:0] $end
    $var wire 32 b mem_data_in [31:0] $end
    $var wire 5 c rd_in [4:0] $end
    $var wire 32 d pc_out [31:0] $end
    $var wire 32 e alu_result_out [31:0] $end
    $var wire 32 f mem_data_out [31:0] $end
    $var wire 5 g rd_out [4:0] $end
    $var wire 2 h wb_sel_out [1:0] $end
    $var wire 1 i reg_write_out $end
    $var wire 1 j mem_to_reg_out $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
1$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b000 (
b00000 )
b00 *
0+
0,
0-
0.
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
b00 3
04
05
06
17
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b000 ;
b00000 <
b00 =
0>
0?
0@
0A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000 E
b00 F
0G
0H
b00 I
b0001 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b000 M
b00 N
b0001 O
b00000000000000000000000000000000 P
b00 Q
b000 R
b00000000000000000000000000000000 S
0T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b0001 W
0X
0Y
b00000000000000000000000000000000 Z
0[
1\
0]
0^
b00 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000 g
b00 h
0i
0j
#5
1#
16
1T
1[
#10
0#
06
0T
0[
#15
1#
16
1T
1[
#20
0#
0$
06
07
0T
0[
0\
#25
1#
16
1T
1[
#30
0#
b00000000000000000000000100000000 %
b00000000000000000000000000000100 &
b00010010001101000101011001111000 '
b010 (
1,
06
b00000000000000000000000100000000 8
b00000000000000000000000000000100 9
b00010010001101000101011001111000 :
b010 ;
1?
b1111 J
b010 M
b1111 O
b010 R
0T
b00000000000000000000000000000100 U
b00010010001101000101011001111000 V
b1111 W
1X
0[
b00000000000000000000000100000000 `
b00000000000000000000000000000100 a
#35
1#
b00000000000000000000000100000000 /
b00000000000000000000000000000100 0
16
b00000000000000000000000100000000 B
b00000000000000000000000000000100 C
1T
1[
b00000000000000000000000100000000 d
b00000000000000000000000000000100 e
#40
0#
b00000000000000000000000100000100 %
b00000000000000000000000000000000 '
b00001 )
b01 *
1+
0,
1-
1.
06
b00000000000000000000000100000100 8
b00000000000000000000000000000000 :
b00001 <
b01 =
1>
0?
1@
1A
0T
b00000000000000000000000000000000 V
0X
1Y
0[
1]
1^
b01 _
b00000000000000000000000100000100 `
b00001 c
#45
1#
b00000000000000000000000100000100 /
b00001 2
b01 3
14
15
16
b00000000000000000000000100000100 B
b00001 E
b01 F
1G
1H
b00010010001101000101011001111000 K
b00010010001101000101011001111000 L
b00010010001101000101011001111000 P
b00010010001101000101011001111000 S
1T
b00010010001101000101011001111000 Z
1[
b00010010001101000101011001111000 b
b00000000000000000000000100000100 d
b00001 g
b01 h
1i
1j
#50
0#
06
0T
0[
#55
1#
b00010010001101000101011001111000 1
16
b00010010001101000101011001111000 D
1T
1[
b00010010001101000101011001111000 f
#60
0#
b00000000000000000000000100001000 %
b00000000000000000000000000001000 &
b00000000000000000000000010101010 '
b000 (
b00000 )
b00 *
0+
1,
0-
0.
06
b00000000000000000000000100001000 8
b00000000000000000000000000001000 9
b00000000000000000000000010101010 :
b000 ;
b00000 <
b00 =
0>
1?
0@
0A
b0001 J
b00000000000000000000000001111000 K
b000 M
b0001 O
b000 R
b00000000000000000000000001111000 S
0T
b00000000000000000000000000001000 U
b00000000000000000000000010101010 V
b0001 W
1X
0Y
0[
0]
0^
b00 _
b00000000000000000000000100001000 `
b00000000000000000000000000001000 a
b00000000000000000000000001111000 b
b00000 c
#65
1#
b00000000000000000000000100001000 /
b00000000000000000000000000001000 0
b00000000000000000000000001111000 1
b00000 2
b00 3
04
05
16
b00000000000000000000000100001000 B
b00000000000000000000000000001000 C
b00000000000000000000000001111000 D
b00000 E
b00 F
0G
0H
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 P
b00000000000000000000000000000000 S
1T
b00000000000000000000000000000000 Z
1[
b00000000000000000000000000000000 b
b00000000000000000000000100001000 d
b00000000000000000000000000001000 e
b00000000000000000000000001111000 f
b00000 g
b00 h
0i
0j
#70
0#
b00000000000000000000000100001100 %
b00000000000000000000000000000000 '
b00010 )
b01 *
1+
0,
1-
1.
06
b00000000000000000000000100001100 8
b00000000000000000000000000000000 :
b00010 <
b01 =
1>
0?
1@
1A
0T
b00000000000000000000000000000000 V
0X
1Y
0[
1]
1^
b01 _
b00000000000000000000000100001100 `
b00010 c
#75
1#
b00000000000000000000000100001100 /
b00000000000000000000000000000000 1
b00010 2
b01 3
14
15
16
b00000000000000000000000100001100 B
b00000000000000000000000000000000 D
b00010 E
b01 F
1G
1H
b11111111111111111111111110101010 K
b00000000000000000000000010101010 L
b00000000000000000000000010101010 P
b11111111111111111111111110101010 S
1T
b00000000000000000000000010101010 Z
1[
b11111111111111111111111110101010 b
b00000000000000000000000100001100 d
b00000000000000000000000000000000 f
b00010 g
b01 h
1i
1j
#80
0#
06
0T
0[
#85
1#
b11111111111111111111111110101010 1
16
b11111111111111111111111110101010 D
1T
1[
b11111111111111111111111110101010 f
